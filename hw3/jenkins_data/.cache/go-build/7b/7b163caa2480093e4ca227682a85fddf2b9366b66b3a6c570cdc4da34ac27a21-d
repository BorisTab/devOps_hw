//line /var/jenkins_home/workspace/hw3/service.go:1
package main

import (
	"context"
	"encoding/json"
	"errors"
	"net/http"
	"strings"

	"github.com/go-kit/kit/endpoint"
)

type StringService interface {
	Uppercase(string) (string, error)
	Count(string) int
}

type stringService struct{}

func (stringService) Uppercase(s string) (string, error) {GoCover_1_343866313330616364386164.Count[0] = 1;
	if s == "" {GoCover_1_343866313330616364386164.Count[2] = 1;
		return "", ErrEmpty
	}
	GoCover_1_343866313330616364386164.Count[1] = 1;return strings.ToUpper(s), nil
}

func (stringService) Count(s string) int {GoCover_1_343866313330616364386164.Count[3] = 1;
	return len(s)
}

var ErrEmpty = errors.New("empty string")

type uppercaseRequest struct {
	S string `json:"s"`
}

type uppercaseResponse struct {
	V   string `json:"v"`
	Err string `json:"err,omitempty"`
}

type countRequest struct {
	S string `json:"s"`
}

type countResponse struct {
	V int `json:"v"`
}

func makeUppercaseEndpoint(svc StringService) endpoint.Endpoint {GoCover_1_343866313330616364386164.Count[4] = 1;
	return func(_ context.Context, request interface{}) (interface{}, error) {GoCover_1_343866313330616364386164.Count[5] = 1;
		req := request.(uppercaseRequest)
		v, err := svc.Uppercase(req.S)
		if err != nil {GoCover_1_343866313330616364386164.Count[7] = 1;
			return uppercaseResponse{v, err.Error()}, nil
		}
		GoCover_1_343866313330616364386164.Count[6] = 1;return uppercaseResponse{v, ""}, nil
	}
}

func makeCountEndpoint(svc StringService) endpoint.Endpoint {GoCover_1_343866313330616364386164.Count[8] = 1;
	return func(_ context.Context, request interface{}) (interface{}, error) {GoCover_1_343866313330616364386164.Count[9] = 1;
		req := request.(countRequest)
		v := svc.Count(req.S)
		return countResponse{v}, nil
	}
}

func decodeUppercaseRequest(_ context.Context, r *http.Request) (interface{}, error) {GoCover_1_343866313330616364386164.Count[10] = 1;
	var request uppercaseRequest
	if err := json.NewDecoder(r.Body).Decode(&request); err != nil {GoCover_1_343866313330616364386164.Count[12] = 1;
		return nil, err
	}
	GoCover_1_343866313330616364386164.Count[11] = 1;return request, nil
}

func decodeCountRequest(_ context.Context, r *http.Request) (interface{}, error) {GoCover_1_343866313330616364386164.Count[13] = 1;
	var request countRequest
	if err := json.NewDecoder(r.Body).Decode(&request); err != nil {GoCover_1_343866313330616364386164.Count[15] = 1;
		return nil, err
	}
	GoCover_1_343866313330616364386164.Count[14] = 1;return request, nil
}

func encodeResponse(_ context.Context, w http.ResponseWriter, response interface{}) error {GoCover_1_343866313330616364386164.Count[16] = 1;
	return json.NewEncoder(w).Encode(response)
}

var GoCover_1_343866313330616364386164 = struct {
	Count     [17]uint32
	Pos       [3 * 17]uint32
	NumStmt   [17]uint16
} {
	Pos: [3 * 17]uint32{
		20, 21, 0xd003a, // [0]
		24, 24, 0x200002, // [1]
		21, 23, 0x3000d, // [2]
		27, 29, 0x2002a, // [3]
		50, 51, 0x4b0041, // [4]
		51, 54, 0x11004b, // [5]
		57, 57, 0x270003, // [6]
		54, 56, 0x40011, // [7]
		61, 62, 0x4b003d, // [8]
		62, 66, 0x3004b, // [9]
		69, 71, 0x410056, // [10]
		74, 74, 0x150002, // [11]
		71, 73, 0x30041, // [12]
		77, 79, 0x410052, // [13]
		82, 82, 0x150002, // [14]
		79, 81, 0x30041, // [15]
		85, 87, 0x2005b, // [16]
	},
	NumStmt: [17]uint16{
		1, // 0
		1, // 1
		1, // 2
		1, // 3
		1, // 4
		3, // 5
		1, // 6
		1, // 7
		1, // 8
		3, // 9
		2, // 10
		1, // 11
		1, // 12
		2, // 13
		1, // 14
		1, // 15
		1, // 16
	},
}
